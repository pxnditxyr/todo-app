{"version":3,"sources":["todo/hooks/useForm.ts","todo/context/TodoContext.ts","todo/hooks/useTodos.ts","todo/components/TodoAdd.tsx","todo/context/todoReducer.ts","todo/context/TodoProvider.tsx","todo/components/TodoEditDescription.tsx","todo/components/TodoItem.tsx","todo/components/TodoList.tsx","todo/components/TodoTitle.tsx","todo/Todo.tsx","index.tsx"],"names":["useForm","initState","useState","form","setForm","handleInputChange","target","name","value","handleReset","TodoContext","createContext","useTodos","useContext","todoState","addTodo","editTodo","toggleTodo","deleteTodo","todos","pendingTodos","filter","todo","completed","length","amountTodos","TodoAdd","description","className","onSubmit","event","preventDefault","id","type","placeholder","onChange","todoReducer","state","action","payload","map","INITIAL_STATE","todoCount","pending","TodoProvider","children","useReducer","dispatch","Provider","TodoEditDescription","isEditable","setIsEditable","onDoubleClick","TodoItem","style","color","onClick","TodoList","TodoTitle","Todo","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e944fdbf.chunk.js","sourcesContent":["import { ChangeEvent, useState } from 'react';\n\n\nexport const useForm = <T extends Object>( initState : T ) => {\n    \n    const [ form, setForm ] = useState( initState );\n\n    const handleInputChange = ( { target } : ChangeEvent<HTMLInputElement> ) => {\n        const { name, value } = target;\n        setForm({\n            ...form,\n            [ name ]: value,\n        })\n    }\n\n    const handleReset = () => setForm( initState );\n\n    return { \n        form,\n        handleInputChange,\n        handleReset,\n        ...form,\n    }\n}\n","import { createContext } from 'react';\nimport { TodoState, Todo } from '../interfaces/interfaces';\n\nexport type TodoContextProps = {\n    todoState: TodoState;\n    addTodo: ( todo: Todo ) => void;\n    editTodo: ( id: string, description: string ) => void;\n    toggleTodo: ( id: string ) => void;\n    deleteTodo: ( id: string ) => void;\n}\n\nexport const TodoContext = createContext<TodoContextProps>( {} as TodoContextProps );;\n","import { useContext } from 'react';\nimport { TodoContext } from '../context/TodoContext';\n\nexport const useTodos = () => {\n    const { todoState, addTodo, editTodo, toggleTodo, deleteTodo } = useContext( TodoContext );\n    const { todos } = todoState;\n\n    return {\n        todos,\n        pendingTodos: todos.filter( todo => !todo.completed ).length,\n        amountTodos: todos.length,\n        addTodo,\n        editTodo,\n        toggleTodo,\n        deleteTodo,\n    }\n}\n","import { FormEvent } from 'react';\nimport { useForm } from '../hooks/useForm';\nimport { useTodos } from '../hooks/useTodos';\n\nimport './todoAdd.css';\n\ninterface FormData {\n    description: string;\n}\n\nexport const TodoAdd = () => {\n\n    const { addTodo } = useTodos();\n\n    const { description, handleInputChange, handleReset } = useForm<FormData>({\n        description: \"\",\n    });\n\n\n    const handleSubmit = ( event : FormEvent<HTMLFormElement> ) => {\n        event.preventDefault();\n        addTodo({\n            id: description,\n            description,\n            completed: false,\n        })\n        handleReset();\n    }\n\n    return (\n        <>\n            <form\n                className=\"todo-add-form\"\n                onSubmit={ handleSubmit }\n                >\n                <label> New Todo </label>\n                <input\n                    id=\"description\"\n                    type=\"text\"\n                    placeholder=\"Todo\"\n                    name=\"description\"\n                    value={ description }\n                    onChange={ handleInputChange }\n                />\n            </form>\n        </>\n    );\n}\n","import { TodoState, Todo } from '../interfaces/interfaces';\n\ntype TodoAction = \n    | { type: 'addTodo', payload: Todo }\n    | { type: 'editTodo', payload: { id: string, description: string } }\n    | { type: 'toggleTodo', payload: { id: string } }\n    | { type: 'deleteTodo', payload: { id: string } };\n\nexport const todoReducer = ( state : TodoState, action : TodoAction ) : TodoState => {\n    switch ( action.type ) {\n        case 'addTodo':\n            return {\n                ...state,\n                todos: [ \n                    ...state.todos, \n                    action.payload\n                ]\n            }\n\n        case 'editTodo':\n            return {\n                ...state,\n                todos: state.todos.map( ({ ...todo }) => {\n                    if ( todo.id === action.payload.id ) {\n                        todo.description = action.payload.description \n                        todo.id = action.payload.description\n                    }\n                    return todo;\n                })\n            }\n\n        case 'toggleTodo':\n            return {\n                ...state,\n                todos: state.todos.map( ({ ...todo }) => {\n                    if ( todo.id === action.payload.id )\n                        todo.completed = !todo.completed! \n                    return todo;\n                })\n            }\n\n        case 'deleteTodo':\n            return {\n                ...state,\n                todos: state.todos.filter( ({ ...todo }) => {\n                    return todo.id !== action.payload.id;\n                })\n            }\n\n\n        default:\n            return state;\n    }\n}\n","import { useReducer } from 'react';\n\nimport { TodoContext } from './TodoContext';\nimport { TodoState, Todo } from '../interfaces/interfaces';\nimport { todoReducer } from './todoReducer';\n\nconst INITIAL_STATE : TodoState = {\n    todoCount: 2,\n    todos: [\n        {\n            id: \"1\",\n            description: \"Fix indent of typescript and jsx\",\n            completed: false\n        },\n        {\n            id: \"2\",\n            description: \"Install more lsp\",\n            completed: false\n        }\n    ],\n    completed: 0,\n    pending: 2\n}\n\ninterface TodoProviderProps {\n    children: JSX.Element | JSX.Element[],\n}\n\nexport const TodoProvider = ( { children }: TodoProviderProps ) => {\n\n    const [ todoState, dispatch ] = useReducer( todoReducer, INITIAL_STATE );\n\n    const addTodo = ( todo: Todo ) => {\n        dispatch({ type: 'addTodo', payload: todo });\n    }\n\n    const editTodo = ( id: string, description: string ) => {\n        dispatch({ type: 'editTodo', payload: { id, description } });\n    }\n\n    const toggleTodo = ( id: string ) => {\n        dispatch({ type: 'toggleTodo', payload: { id } });\n    }\n\n    const deleteTodo = ( id: string ) => {\n        dispatch({ type: 'deleteTodo', payload: { id } });\n    }\n\n    return (\n        <TodoContext.Provider\n            value={{ \n                todoState,\n                addTodo,\n                editTodo,\n                toggleTodo,\n                deleteTodo,\n            }}\n        >\n            { children }\n        </TodoContext.Provider>\n    );\n}\n","import { useState, FormEvent } from 'react';\nimport { useTodos } from '../hooks/useTodos';\nimport { useForm } from '../hooks/useForm';\nimport { Todo } from '../interfaces/interfaces';\n\nimport './todoEditDescription.css';\n\ninterface FormDataTodoEdit {\n    description: string;\n}\n\ninterface TodoEditDescriptionProps {\n    todo: Todo;\n}\n\n\nexport const TodoEditDescription = ( { todo } : TodoEditDescriptionProps ) => {\n\n    const [ isEditable, setIsEditable ] = useState( false );\n    const { editTodo } = useTodos();\n\n    const { description, handleInputChange } = useForm<FormDataTodoEdit>({\n        description: todo.description,\n    })\n\n    const handleSubmit = ( event : FormEvent<HTMLFormElement> ) => {\n        event.preventDefault();\n        setIsEditable( !isEditable );\n        editTodo( todo.id, description );\n    }\n\n    return (\n        <>\n            {\n                !isEditable\n                ?\n                <p\n                    onDoubleClick={ () => setIsEditable( !isEditable ) }\n                    >\n                    { todo.description }\n                </p>\n                :\n                <form onSubmit={ handleSubmit }>\n                    <input\n                        id=\"description\"\n                        className=\"todo-edit-input\"\n                        name=\"description\"\n                        type=\"text\"\n                        value={ description }\n                        onChange={ handleInputChange }\n                    />\n                </form>\n            }\n        </>\n    );\n};\n","import { Todo } from '../interfaces/interfaces';\nimport { useTodos } from '../hooks/useTodos';\nimport { TodoEditDescription } from './TodoEditDescription';\n\nimport './todoItem.css';\n\ninterface TodoItemProps {\n    todo: Todo\n}\n\nexport const TodoItem = ( { todo } : TodoItemProps ) => {\n\n    const { toggleTodo, deleteTodo } = useTodos();\n\n    return (\n        <>\n            <li\n                className=\"todo-item\"\n            >\n                <section className=\"description-item\">\n                    <TodoEditDescription todo={ todo }/>\n                </section>\n                <section className=\"change-items\">\n                    <span\n                        onDoubleClick={ () => toggleTodo( todo.id ) }\n                        style={{\n                            color: todo.completed ? \"green\" : \"red\"\n                        }}\n                    > \n                        { todo.completed ? \"✔\" : \"✘\" }\n                    </span>\n                    <span onClick={ () => deleteTodo( todo.id ) }>\n                    🗑️\n                    </span>\n                </section>\n            </li>\n        </>\n    );\n}\n","import { useTodos } from '../hooks/useTodos';\nimport { TodoItem } from './TodoItem';\n\nimport './todoList.css';\n\nexport const TodoList = () => {\n\n    const { todos }  = useTodos();\n\n    return (\n        <ul>\n            {\n                todos.length > 0\n                ?\n                todos.map( todo =>\n                    <TodoItem key={ todo.id } todo={ todo }/>\n                )\n                :\n                ( <p className=\"no-todos\" > You don't have any Todo </p> )\n            }\n        </ul>\n    )\n}\n","import { useTodos } from '../hooks/useTodos';\n\nimport './todoTitle.css';\n\nexport const TodoTitle = () => {\n\n    const { pendingTodos, amountTodos } = useTodos();\n\n    return (\n        <div className=\"todo-title\">\n            <h1> Todos: <span> { amountTodos } </span> </h1>\n            <h3> Pending Todos: <span> { pendingTodos } </span> </h3>\n        </div>\n    )\n}\n","import { TodoAdd } from './components/TodoAdd';\nimport { TodoProvider } from './context/TodoProvider';\nimport { TodoList } from './components/TodoList';\nimport { TodoTitle } from './components/TodoTitle';\n\nimport './todo.css';\n\nexport const Todo = () => {\n    \n    return (\n        <TodoProvider>\n            <div className=\"container\">\n                <TodoTitle />\n                <TodoAdd />\n                <TodoList />\n            </div>\n        </TodoProvider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Todo } from './todo/Todo';\n\nimport './index.css';\n\nReactDOM.render(\n    <Todo />,\n    document.querySelector( \"#root\" ),\n);\n"],"sourceRoot":""}